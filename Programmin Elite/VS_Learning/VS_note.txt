1. error LNK2038: 检测到“RuntimeLibrary”的不匹配项的解决办法
libcef_dll_wrapper.lib(ImfFrameBuffer.obj) : error LNK2038: 检测到“RuntimeLibrary”的不匹配项: 值“MTd_StaticDebug”不匹配值“MDd_DynamicDebug”(obs-browser.obj 中)

工程的运行库不匹配导致的。

解决办法： 在编译生成libcef_dll_wrapper.lib的工程中修改，
在工程上右键-》属性-》c/c++-》代码生成-》运行库
有四个选项及含义分别如下：
多线程调试Dll (/MDd) 对应的是MD_DynamicDebug
多线程Dll (/MD) 对应的是MD_DynamicRelease
多线程(/MT) 对应的是MD_StaticRelease
多线程(/MTd)对应的是MD_StaticDebug

error LNK2038: 检测到“RuntimeLibrary”的不匹配项: 值“MTd_StaticDebug”不匹配值“MDd_DynamicDebug
从上面的错误提示可知，我们原来选择的是 多线程(/MTd) ，改为 多线程调试Dll (/MDd) 选项 即可。

当然有的人遇到这样的问题，是要将 多线程调试Dll (/MDd) 改为 多线程(/MTd) 解决问题的。
无论是哪种，总之要将运行库选项配成一致即可！

2. VS的包含目录、库目录、引用目录、可执行目录解释
VS项目中的包含目录、库目录、附加包含目录、附加库目录、附加依赖项均在”项目->属性->配置属性”下进行配置，具体说明如下：

VC++目录：
包含目录：寻找#include<xxxx.h>中的xxxx.h的搜索目录
库目录：寻找.lib文件的搜索目录

C/C++：
常规->附加包含目录：寻找#include<xxxx.h>中的xxxx.h的搜索目录（每一项对应一个文件夹XXXX，文件夹中包含了编译时所需的头文件，使用时直接#include<XXXX>即可）

链接器：
常规->附加库目录：寻找.lib文件的搜索目录
输入->附加依赖项：lib库（C++的库会把函数、类的声明放在*.h中，实现放在*.cpp或*.cc中。编译之后，*.cpp，*.cc，*.c会被打包成一个.lib文件，这样可以保护源代码）

常见问题：
1). 包含目录和附加包含目录（库目录和附加库目录）的区别：
包含目录：修改了系统的include宏的值，是全局的；
附加包含目录：用于当前项目，对其他项目没有影响。
（库目录和附加库目录的区别同上）

2). 可知包含目录和附加包含目录（库目录和附加库目录）的区别主要在于全局还是当前，那么当需要对某工程添加这些目录时，通常情况下，都是在附加包含目录和附加库目录中添加的。

3). 要使用一个库，除了要include其头文件以外（附加包含目录），还要在链接过程中把lib加进去（附加库目录、附加依赖项）。

4). 添加方法：
附加包含目录---添加工程的头文件目录：

项目->属性->配置属性->C/C++->常规->附加包含目录：加上头文件的存放目录；

附加库目录---添加文件引用的lib静态库路径：

项目->属性->配置属性->链接器->常规->附加库目录：加上lib文件的存放目录；

附加依赖项---添加工程引用的lib文件名：

项目->属性->配置属性->链接器->输入->附加依赖项：加上lib文件名。

5). 当需要向项目中添加.dll动态链接库时，直接将需要添加的.dll文件拖拽到项目生成的.exe所在的文件夹下即可（项目->属性->配置属性->常规->输出目录，可以看到.exe生成在哪个目录下）。

6). 在添加上述几个目录的路径的时候，可以看到$(xxxx)，这就是宏了，可以点开右下角的宏查看这些分别代表什么字符串。

3.
